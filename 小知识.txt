VIM的使用命令
1）命令模式（默认模式）：略
2）输入模式：i  I   a A   o O
3）末行模式：:wq :q :w :q! :x
yy：复制当前行
nyy：n表示大于1的数字，复制n行
yw：从光标处复制至一个单子/单词的末尾，包括空格
ye：从光标处复制至一个单子/单词的末尾，不包括空格
y$：从当前光标复制到行末
y0：从当前光标位置（不包括光标位置）复制之行首
-------------------------------------------------------------------------
emmet命令
1.ctrl+shift+g :给文字加标签
2.h10(p) Tap:height:10px;
3.#是一个值分离器，所以不需要使用连字符分隔它，例如：
  bd5#0s → border: 5px #000 solid:
-------------------------------------------------------------------
sublime:
Ctrl+H 查找替换
Ctrl+D 多行游标
Ctrl+K 跳过一个文件
Ctrl+Shift+D 复制整行
Alt+F3：选择所有与选中游标所在单词相同的单词
按住shift键，然后按住鼠标右键向下拖动，也可产生多行游标
Ctrl+Shift+P 快捷键的作用是：打开命令模式
ctrl+p#body 匹配到body 这个标签
ctrl+enter 在当前下方添加一行
ctrl+shirt+enter 在当前上方添加一行
鼠标拖拽选择ul内的元素 Ctrl+] 增加缩进 [ 减小缩进。

我的文件被保存为 UTF-8，而且变成了乱码，要如何恢复？
答：请打开这个文件，并确认它的编码是 UTF-8，然后选择菜单项目 File > Save with Encoding > Western (Windows 1252)，关闭再重新打开该文件即可。

view in browser
默认的快捷键应该是这样的，我用的是IE浏览器。所以ctrl+alt+i 即可让html 文件在浏览器上预览。
CTRL + ALT + F - Firefox
CTRL + ALT + C - Chrome
CTRL + ALT + I - Internet Explorer
CTRL + ALT + S - Safari

//没试-------------------------------------------------------------------
如果想要自定义快捷键的话，可以在setting 里自己设定ueser。
第一步,在user中配置默认浏览器

{
　　"browser": "safari",

}
第二步,在sublime的keybindings中配置各浏览器快捷键
{ "keys": [ "ctrl+alt+v" ], "command": "view_in_browser" },
{ "keys": [ "f5" ], "command": "view_in_browser", "args": { "browser": "firefox" } },
{ "keys": [ "f3" ], "command": "view_in_browser", "args": { "browser": "chrome" } },
{ "keys": [ "ctrl+alt+i" ], "command": "view_in_browser", "args": { "browser": "iexplore" } },
{ "keys": [ "f4" ], "command": "view_in_browser", "args": { "browser": "safari" } }
//没试-------------------------------------------------------------------

------------------------------------------------------------------------------
浏览器调试工具
1.crtl+上下箭头
  shift+上下箭头
------------------------------------------------------------

在potplayer中，默认加速的快捷键是C，减速是X，平常速度是Z
------------------------------------------------------------------------------------------
fireworks
1.空格键:手型
2.ctrl + alt :放大
3.ctrl:临时切换到指针工具
4.shift+i: 吸取颜色
5.crtl+t :变型
6.ctrl+d：取消选择

抹掉图片上的东西
1.位图中选取框工具
2.crtl+t 变形
3.

图标合并
1.新建画布-选透明
2.放在i标签里,怎么拼比较自由,但在放在(例如h3中),就只能纵向拼(靠右对齐)
3.间距一般留几个像素
4.选择 鼠标划拉一下 他会自己选中每一个 右键插入矩形切片-选单一
5.若导出png 不要忘了色板选透明
6.把导出来的放到画布中
7.视图-标尺
8.画辅助线-在标尺上开始拖拽鼠标
9.自己看坐标:选单一;(左上为00 xy全为负值)
10.选多重-导出CSS Sprite
--------------------------------------------------------------------
DOS操作命令
从C盘转到D盘:D:
进入子文件夹:cd 目录名
退出子文件夹:cd..

----------------------------------------------------------------------------------------------------------
<video width="1000" height="500" controls>
    <source src="红妖.mp4" type="video/mp4">
    <!-- <source src="a.webm" type="video/webm"> -->
    您的浏览器不支持 video 标签。
</video>

<audio src="息兮.mp3" controls="controls">
Your browser does not support the audio tag.
</audio>

<!-- <div class="music" id='3F' >
  <embed src="息兮.mp3" autostart="true" loop="true" hidden="true"  loop="true">
</div> -->
--------------------------------------------------------------------------------
设置宽高 [left top] 时不要忘记加px!!!!
一定要注意判断语句if里面是==
--------------------------------BOM------------------
对象.scrollHeight/scrollWidth 除开边框以外盒子里面放的东西的宽
-------------------------------Event-----------------------
1.####event对象的兼容性问题
ie/chrome：event是一个内置的全局对象
标准下（包括ff）：事件对象是通过事件函数的第一个参数传入
如果一个函数是被事件调用的，那么，这个函数定义的第一个参数就是事件对象）

event：
事件对象。当一个事件发生的时候，和当前这个对象发生的这个事件有关的一些详细的信息
[鼠标位置、键盘按键]都会被临时保存到一个指定的地方，这个地方就是event对象，供我们在需要的时候调用。（比喻：飞机-黑匣子）
var ev = ev || event;
ev.keyCode


2.给一个对象绑定一个事件处理函数的第一种形式[赋值的形式]
对象.事件＝事件处理函数（如obj.onclick = fn;)

[为了给一个对象的同一个事件绑定多个不同的事件函数 而不会被覆盖]
给对象绑定事件处理函数的第二种形式[函数的形式]
兼容问题：document.onclick = fn1;
ie：
obj.attachEvent(事件名称, 事件函数);
obj.detachEvent(事件名称, 事件函数);[事件取消]
document.attachEvent(‘onclick’, fn1);

没有捕获
事件名称有on
事件函数执行的顺序：标准ie -> 正序；非标准ie -> 倒序
this指向window

解决方法：
利用call方法。如：
[函数下的一个方法(像数组下的push之类的方法一样)
在其他大多数时候 fn()<=>fn.call()
call方法的第一个参数可以改变函数执行过程中的内部this的指向
call方法的第二个参数开始就是原来函数的参数列表]
document.attachEvent(‘onclick’, function(){fn1.call(document)});
----------------------------------
标准：
obj.addEventListener(事件名称, 事件函数, 是否捕获);
document.addEventListener(‘click’, fn1, false);
obj.removeEventListener(事件名称, 事件函数, 是否捕获 );[事件取消]

有捕获
事件名称没有on
事件函数执行顺序：正序
this指向触发该事件的对象
是否捕获：默认是false。
false：冒泡；
true：捕获

冒泡[一般把事件绑定在父亲身上]:告诉div1，如果有一个出去的事件触发了你，你就去执行fn1这个函数
捕获:告诉div1，如果有一个进去的事件触发了你，你就去执行fn1这个函数
--------------------------------------
function bind(obj, evname, fn){
    if(obj.addEventListener){
        obj.addEventListener(evname, fn, false);
    } else {
        obj.attachEvent('on' + evname, function(){
            fn.call(obj);
        })
    }
}

----------------------------javascript-------------------
css中在html中加样式:style="display:block;"
js中加样式:
ul.style.display = 'block';       // :变= 还有不要忘了加"" 还有 .
oDiv.style.cssText = ' width:200px; height:200px; ';
oP.className = 'red';

不允许出现-:font-size => fontSize

class为保留字(即以后有可能成为关键字),
所以在给某个元素添加类的时候不能.class => .className

不能作为判断条件:
背景
color red #f00
相对路径

###[]中括号的使用
点“.”后面的值无法修改
中括号[]里面的值可以修改；JS中允许把”.”替换成“[]”

.actve一直变
思路一：全部清空，当前添加(很好操作,但浏览器很累)
for( var i=0; i<aLi.length; i++ ){
	aLi[i].className = '';
}
this.className = 'active';

思路二：清空上个，当前添加
oldLi.className = '';
oldLi = this;
this.className = 'active';

ECMAScript：标准、核心
HTML 标签类型：block、inline、inline-block、table……
JS中的数据类型：
数字(NaN)、字符串、布尔、函数、对象(obj[元素]、[]、{}、null)、未定义[undefined:已经声明 var ]

真：[7]
非0的数字、非空字符串[空格也算非空]、true、函数、能找到的元素、[]、{}
假：[7]
0、NaN、空字符串''、false、不能找到的元素、null、未定义

typeof 判断数据类型

显式类型转换（强制类型转换）：
Number()
parseInt()
parseFloat()

toFixed() 返回字符串;

隐式类型转换：
  +               200 + '3'   变成字符串
  - * / %       '200' - 3     变成数字
  ++ --           变成数字
  > <             数字的比较 、字符串的比较
  ! 取反          把右边的数据类型转成布尔值
  ==

NaN：not a number 不是个 数字 的 数字类型
isNaN();Number();是老铁
//判断不是NaN
//isNaN(arr[i])===false
//arr[i]===arr[i]

HTML 中拿到的内容，类型都是字符串

FF[fixfox]不能对[if for]里面的函数进行预解析,所以全局变量和函数尽量放在最外面
-------------------------------------------------------------
this:指的是调用 当前方法（函数）的那个对象
1.很多时候回省略调用this的window
2.
for(var i=0;i<aLi.length;i++){
  aLi[i].onclick=function(){
      that = this;
      fn1();
       //这样在之前把this的值存在了that中,[在全局变量中声明 var that = null;]fn1中就可以用that代替this
  }
}
----------------------------------------------------------
for(var i=0;i<aLi.length;i++){  //只有for循环执行完了才可以点击[不执行完鼠标点不了]
  aLi[i].onclick=function(){
      //这里面是局部作用域
      alert(i);//3

      this.style.background = 'yellow';
  }
}
for(var i=0;i<aLi.length;i++){
  fnWrite(aLi[i]);                      //这里的i每一个都可以成功
}
//自己理解
这个循环是添加点击[事件事件]aLi[i].onclick 就执行到这里 后面的
=function(){
    //这里面是局部作用域
    alert(i);//3

    this.style.background = 'yellow';   //每个都能成功添加背景颜色
                                                          //因为this： 指的是调用 当前方法（函数）的那个对象
  }
}
要当鼠标点击时才执行
-------------------------------------------------------------------
重用代码：[传参,函数内做判断]
  1、尽量保证 HTML 代码结构一致，可以通过父级选取子元素
  2、把核心主程序实现，用函数包起来
  3、把每组里不同的值找出来，通过传参实现

// alert(0||-1);      //-1
// alert(-1||0);      //-1

// alert(1||-1);      //1
// alert(-1||1);      //-1

// alert(2||-1);      //2
//alert(-1||2);       //-1

// alert(1||0);       //1
// alert(-1||-2);     //-1
//故:两个操作数中只有一个真值时,返回这个真值[只有0是假值]
//   两个操作数都是真值时,返回第一个[即前面那个]值

return[函数中]：返回值
  1) 函数名+括号：fn1() ==>  return 后面的值；
  2) 所有函数默认返回值：未定义；
  3) return 后面任何代码都不执行了；!!!

arguments[函数中]
fn1( 1,2,3 );    // 实参——实际传递的参数
// function fn1( a,b,c ){}   // 形参——形式上，abc这些名代表123

function fn1(){
  // arguments => [ 1,2,3 ]   // 实参的集合 不是数组,没有数组的那些方法
  // alert( arguments );
  // alert( arguments.length );
  // alert( arguments[arguments.length-1] );
}
当函数的参数个数无法确定的时候：用 arguments

// 直接调用
// fn1();
// 事件调用
// document.onclick = fn1;
//定时器也可以调用
//setInterval( 函数, 毫秒 )    重复执行（发动机
//setTimeout( 函数, 毫秒 )      执行一次（炸弹
定时器如果是由用户控制的,一定要先关后开[原则]

var timer = null;                               // null
alert(timer);                                     // null
clearInterval( timer );                       // null

var timer;                                        //undefined
alert(timer);                                    //undefined
clearInterval( timer );                      //undefined

alert(oBody.timer);                           //undefined
clearInterval( oBody.timer );             //undefined

只有这个不可以 最起码要声明
alert(timer);                                      //报错
clearInterval(timer );                         //报错

// 天：Math.floor(t/86400)
// 时：Math.floor(t%86400/3600)
// 分：Math.floor(t%86400%3600/60)
// 秒：t%60
// January、February、March、April、May、June、
// July、August、September、October、November、December

Math.floor(t/86400)+'天'
+Math.floor(t%86400/3600)+'时'
+Math.floor(t%86400%3600/60)+'分'
+t%60+'秒';

Math.floor(t/86400)+'天'+Math.floor(t/3600)+'时'+Math.floor(t/60)+'分'+t%60+'秒';

// 数字形式：new Date( 2013,4,1,9,48,12 );
// 字符串形式：new Date('June 10,2013 12:12:12');

// January、February、March、April、May、June、
// July、August、September、October、November、December
--------------------------------------------------------------------------------------------------------------------
字符串:

var str = '妙味课堂-WWW.miaov.com';

str.charAt(1);      // '味'
str.charCodeAt(1);      // 21619
String.fromCharCode(22937, 21619);  // '妙味'

str.indexOf('m', 4);      // 9
str.lastIndexOf('o');     // 16

'1000' < '2'      // true
'1000' > 2      // true

str.substring(0, 4);      // '妙味课堂'
str.slice(-3);      // 'com'

str.toUpperCase();      // '妙味课堂-WWW.MIAOV.COM'
str.toLowerCase();      // '妙味课堂-www.miaov.com'

str.split('.', 2);      // [ '妙味课堂-WWW', 'miaov' ]

var arr = [ 'www', 'miaov', 'com' ];
arr.join('aaa');      // 'www.miaov.com'
------------------------------------------------------------------------------------------------------------------------------
jason
 var json2 = { name : 'miaov' };
var json2 = { 'name' : 'miaov' };               //提倡的写法 更安全

alert( json2.name );
alert( json2['name'] );                          //不管哪个写法 当用中括号的时候 都要加引号

var json4 = { 'name' : 'miaov', 'age' : 3, 'fun' : '前端开发'  };
for ( var attr in json4  ) {          //遍历     attr 属性名  'name' 'age' 'fun'         所以attr不用引号
  // alert( attr );                         // 相当于alert('name'); alert('age');alert('fun');
  // alert( json4[attr] );              //             alert( json4['name']); alert( json4['age']);alert( json4['fun']);
}


for in 数组和json都可以用
for循环只能数组用[json没有length]
-------------------------------------------------------------------------------------------------------------------------
数组
var arr = new Array(3);           //定义了一个长度为3的数组
var arr = new Array('3');          //定义了一个长度为1 ---[3]----的数组

清空数组
// arr.length = 0;       //数组的length是可写的 但是字符串是不能的
// arr = [];                  //效率更高一点

//都返回数组的新的长度
var arr = [ 1,2,3 ];
// alert( arr.push( 'abc' ) );
// alert( arr );
alert( arr.unshift( 0 ) );      // IE 6  7 不支持 unshift 返回值
// alert( arr );

//都返回删除[扔掉]的哥们
var arr = [ 'TM', '钟毅', '张森', '杜鹏', 'Leo' ];
// alert( arr.pop() );
// alert( arr );
alert( arr.shift() );
// arr.shift();
alert( arr );

//排队走[顺着 倒着]
var arr = [ 'TM', '钟毅', '张森', '杜鹏', 'Leo' ];
// arr.unshift(arr.pop());
// arr.unshift(arr.pop());

arr.push(arr.shift())
// alert( arr );

//splice   删除、替换、添加  只返回被删除的哥们  从哪开始 要干几个 干啥
var arr = [ 'TM', '钟毅', '张森', '杜鹏', 'Leo' ];
// arr.splice( 0 , 2 );
// arr.splice( 0, 2, '莫涛 or 钟毅' );
// alert( arr.splice( 1, 0, '钟毅媳妇儿~', '钟毅媳妇们~' ) );
alert( arr );

//数组去重
var arr = [ 1,2,2,4,2 ];
for ( var i=0; i<arr.length; i++ ) {
  for ( var j=i+1; j<arr.length; j++ ) {
    if ( arr[i] == arr[j] ) {
      arr.splice( j, 1 );
      j--;
    }
  }
}
alert( arr );

sort();
默认以字符串来排序

Math.round(3.4);   //四舍五入
Math.ceil(3.4);      //向上取整
Math.random();     //产生0~1之间的随机数
// x ~ y
var x = 3;
var y = 49;
// alert( Math.round( Math.random()*(y-x) + x ) );

// 0~x
// alert(
Math.round( Math.random()*x)
);

// 1~x
alert( Math.ceil( Math.random()*x) );

-----------------当鼠标移动到元素上，多次触发mouseover,mouseout事件[时间冒泡]-------------------
W3C在mouseover和mouseout事件中添加了relatedTarget属性 ：
•在mouseover事件中，它表示鼠标来自哪个元素
•在mouseout事件中，它指向鼠标去往的那个元素

IE在mouseover和mouseout事件中添加了两个属性
•fromElement，在mouseover事件中表示鼠标来自哪个元素
•toElement，在mouseout事件中指向鼠标去往的那个元素

document.getElementById('box1')  //是父亲

document.getElementById('box1').onmouseover = function (e) {
     if (!e) e = window.event;
     var reltg = e.relatedTarget ? e.relatedTarget : e.fromElement;
     while (reltg && reltg != this) reltg = reltg.parentNode;
     if (reltg != this) {
          // 这里可以编写 onmouseenter 事件的处理代码
          alert('111');
     }
}

document.getElementById('box1').onmouseover = function (e) {
     if (!e) e = window.event;s
     var reltg = e.relatedTarget ? e.relatedTarget : e.toElement;
     while (reltg && reltg != this) reltg = reltg.parentNode;
     if (reltg != this) {
          // 这里可以编写 onmouseenter 事件的处理代码
          alert('111');
     }
}

-------------------inline-block ----------------浮动----------------------------------------------------
inline-block
1.使块元素在一行显示
2.使内嵌支持宽高
3.换行被解析了
4.不设置宽度的时候宽度由内容撑开
5.在IE6,7下不支持块标签

浮动: left/right/none
元素加了浮动，会脱离文档流 ，按照指定的一个方向移动直到碰到父级的边界或者另外一个浮动元素停止
1.使块元素在一行显示
2.使内嵌支持宽高
3.不设置宽度的时候宽度由内容撑开
4.脱离文档流
5.提升层级半层
** 文档流是文档中可显示对象在排列时所占用的位置

clear left/right/both/none 元素的某个方向不能有浮动元素  //clear属性只对块元素起作用
------------------------------------定位------------------------------------------------
position:relative;  相对定位
a、不影响元素本身的特性；
b、不使元素脱离文档流；
c、如果没有定位偏移量，对元素本身没有任何影响；
定位元素位置控制[沿着这个盒子原来的位置移动]
top/right/bottom/left  定位元素偏移量。

position:absolute;  绝对定位
a、使元素完全脱离文档流；
b、使内嵌支持宽高；
c、块属性标签内容撑开宽度；
d、如果有定位父级相对于定位父级[相对/绝对都有效]发生偏移，没有定位父级相对于整个文档发生偏移；
e、相对定位一般都是配合绝对定位元素使用

position:fixed； 固定定位
与绝对定位的特性基本一致，差别是始终相对整个文档进行定位；
问题：IE6不支持固定定位；

定位元素 默认后者层级高于前者
z-index:[number]；  定位层级

让一个元素在他父亲元素的正中间
css:
top:50%;
left:50%;
margin-top:-整个盒子自身高度的一半;[注意不要忘了边框和内边距]
margin-left:-整个盒子自身宽度的一半;

--------------------------------消除浮动------------------------------------------------
1.给父级也加浮动
2.给父级加 display:inline-block;
3.在浮动元素下加
  <div class="clear"></div>
  .clear{
    height:0;
    font-size:0;
    clear:both;
  }
4.在浮动元素下加
  <br clear="all">  //  <br clear="all" />   属于内嵌样式,不符合w3c标准[结构样式行为三者分离] all代表both
5.给浮动元素父级加
.clearfix{
  zoom:1;
}
.clearfix:after{
	content:'';                                    //追加的内容
	display: block;                           //clear属性只对块元素起作用
	clear: both;
}

//:after 在元素的末尾追加东西

6.给浮动元素父级加overflow:hidden/auto;
  一定要配合zoom:1;来使用[在IE6 7下没有包住浮动元素的功能]

overflow 溢出[有可以包住浮动元素的特点:即把元素提升层级]
auto:溢出显示滚动条
scroll:默认显示滚动条
hidden:溢出隐藏

7.给父级也加浮动 绝对/固定定位
-------------------------------------IE6 7-------------------------------------------------------
在IE6下高度小于19px的元素,高度会被当做19px来处理
解决办法:
1.font-size:0;   //但只能处理到最小2px的高度
2.overflow:hidden;
---------------------------------------------------------------
在IE6 7 下浮动元素的父级有宽度就不用清浮动;

haslayout  根据元素的内容大小或者父级的大小来重新的计算宽高

可以触发layout的属性
display:inline-block;
height:(任何值除了auto)
float:(left或right)
width:(任何值除了auto)
zoom:(除normal外任何值)

在IE6 7 下元素浮动，要并在同一行的元素都要加浮动
-----------------------------------------------------------------------
IE6下的双边距BUG
在IE6下，块元素有浮动和横向margin的时候，横向的margin值会被放大成两倍
解决办法: display:inline;

IE6，7下li的间隙
在IE6，7下li本身没浮动,但是li内容有浮动的时候，li下边就会产生几px的间隙
解决办法:
1.给li加浮动
2.给li加vertical-align:top; //middle bottom

ie6 下父级的overflow:hidden;是包不住子级的相对定位的
解决办法:给父级也加上定位(相对一般)

在 IE6 下定位元素的父级宽高都为奇数那么在 IE6 下定位元素的 right 和 bottom 都有1像素的偏差。
--------------------------------------------------------------------------------------
绝对定位内部元素不继承父级宽度，而是靠内容自动撑开宽度
white-space:nowrap;


li中插入img图片间有空隙的解决方案
img{vertical-align:bottom; display:block}
设置容器font-size:0(个人认为这种方法最好！！！)

li:last-child{
    border-right: none;
}
first-child
nth-child(2)

a标签包图片会有边框 所以
img{
  border:none;
}

vertical-align:middle:
若想让几个元素都中间对齐,则每一个都加上vertical-align:middle;
[对浮动元素无效 若不想让浮动元素顶部对齐 只能通过设置margin]

标签嵌套规范:p标签里不能包含块标签

body< html < 文档

标准   不透明度  opacity:0~1;
IE私有  filter:alpha(opacity=0~100);

基本类型变量用八字节内存

js中字符串连接用那个比较高效？Array.join()

<sup></sup>上标
<sub></sub>下标

超小屏，小屏，中屏和大屏:768 992 1200

<hr />定义水平线

HTML注释
<!--注释的内容-->

CSS注释
/* 注释内容 */

JS注释
单行注释以 // 开头。
多行注释以 /* 开始，以 */ 结尾。

border
一个值:四条边
两个值:上下,左右
三个值:上,左右,下
四个值:上,右,下,左

可视屏幕高
sw=$(window).width();

查找
:/     回车enter

与调试器结合:
console.log()

ul和li无序列表
ol和li有序列表 这两个都是这样搭配着使用的

a中不能再嵌套a

h1标签:加粗、大号文字

&nbsp:Non-Breaking Space

在给span设置宽度的时候 一定不要忘记display:block;
----------------------------块 行内 可变-----------
display:block;
块级元素独占一行,宽度自动填满其父元素的宽度 块元素内可放内联元素和块元素
div p ul li

display:inline;
行内元素排列在同一行中,直到这行排不下才换行 内联元素内可放文本和内联元素
行内元素 width height 无效
         padding margin竖直方向无效
a span strong em img input label

display:inline-block;
元素呈现为内联对象，周围元素保持在同一行，但可以设置宽度和高度地块元素

可变元素(可根据上下文语境):button

inline-block的IE兼容性问题：
1.IE不识别display:inline-block;
2.使用display:inline-block在IE下会触发layout(触发了layout，而它本就是行布局，所以触发后，块元素依然还是行布局，而不会如Opera中块元素呈递为内联对象)
3.触发块元素的layout（如：zoom:1等)

IE下块元素如何实现display:inline-block的效果？
1.
div {display:inline-block;}
div {display:inline;}
2.
div {display:inline; zoom:1;}
--------------------------------------属性的可继承性--------------------------
权重 ：内联 权重1000 ，
       ID 选择器 权重：100，
       类 伪类 属性选择器 权重：10 ，
       类型选择器 权重：1
       除!important ，内联权重最大！

css样式选择器的优先级相同时，后面定义的样式生效。
css属性的继承：

不可继承的：display、margin、border、padding、background、height、min-height、max- height、width、min-width、max-width、overflow、position、left、right、top、 bottom、z-index、float、clear、table-layout、vertical-align、page-break-after、 page-bread-before和unicode-bidi。

所有元素可继承：visibility和cursor。

内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、 font-family、font-size、font-style、font-variant、font-weight、text- decoration、text-transform、direction。

块状元素可继承：text-indent和text-align。

列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。

表格元素可继承：border-collapse。
------------------------------------------------------------------------------------
2016.08.29 笔记

-------------------------------------

元素对象的标准属性
obj.id
obj.className
obj.style
obj.title

元素对象的非标准属性:可以是任何东西
获取:getAttribute
设置:setAttribute

元素对象的js属性
obj.tagName       标签名:h1
obj.innerHTML   标签里面的内容:linux is <i>very</i> much!
obj.outerHTML  标签的html代码:<h1 info='linux is very much!' id='hid' class='hcls'>linux is <i>very</i> much!</h1>
obj.textContent 标签里面的文本 不要里面的HTML代码:linux is very much!

获取dom元素对象的方法:
document.getElementById()
document.getElementsByTagName()
document.getElementsByClassName()
document.getElementsByName()

直接获取dom元素对象集合:
document.links
document.images
document.forms
document.anchors  //锚点
tableObj.rows
tableRowObj.cells
selectObj.options

