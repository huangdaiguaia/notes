js运动课程

框架:
开启定时器前 要关掉上一个定时器
if else
30 一般不能太大 不然会一顿一顿的

clearInterval(timer);
	timer=setInterval(function (){
		var iSpeed=5;

		if(oDiv.offsetLeft>=300)	//是否到达终点
		{
			clearInterval(timer);	//到达终点
		}
		else
		{
			oDiv.style.left=oDiv.offsetLeft+iSpeed+'px';	//到达之前
		}
	}, 30);


缓冲运动[逐渐变慢 最后停止]
计算机接受不了小数 遇见小数 他会挠挠头 直接扔掉[实际上 在计算机内部 小数也是用整数来处理的]
var iSpeed=(iTarget-oDiv.offsetLeft)/8;
iSpeed=iSpeed>0?Math.ceil(iSpeed):Math.floor(iSpeed);

匀速运动
clearInterval(timer);
	timer=setInterval(function (){
		var iSpeed=oDiv.offsetLeft<iTarget?7:-7;

		if(Math.abs(oDiv.offsetLeft-iTarget)<7)	//-----------------
		{
			clearInterval(timer);

			oDiv.style.left=iTarget+'px';        //-------------------
		}
		else
		{
			oDiv.style.left=oDiv.offsetLeft+iSpeed+'px';	//到达之前
		}
	}, 30);


弹性运动的问题：如height不能为负[运动过界]


if ( oUl.children[0] ) {
	oUl.insertBefore( oLi, oUl.children[0] );
} else {
	oUl.appendChild( oLi );
}


str='12';
alert(str*3);
alert(typeof(str));     //number

var on =true;
 //on 为了防止这个函数没执行完 有点击 再执行一遍
if(!on){return;}
on=false;

onOff = true; //在函数执行完之后设置这个

display:none; //占不占位置???


opacity: 0.8;
filter: alpha(opacity=80);
---------------------------------------------------------面向对象------------------------
多态:父类和子类多相同的操作 但是这些操作又不是那么一样

//变量,函数：自由[其实是属于window的]
//属性,方法：属于一个对象[也相当于变量,函数]

构造函数:构造对象的函数[一般new出来一个对象 首字母大写]

工厂方式:
1.原料
2.加工
3.出厂

问题:
1.在调用这个方式创建对象的时候 没有new [你会发现加了new之后会简单很多]
2.在工厂方式中的方法是一样的 但创建出来的对象每一个都会和自己绑一个方法[浪费内存]

this指向:
当前方法属于谁,指向谁
函数前面有new的时候,指向函数默认new出来的对象


prototype[原型] 方式:给一个对象的原型添加方法 [扩展系统函数的功能]
[解决2.在工厂方式中的方法是一样的 但创建出来的对象每一个都会和自己绑一个方法[浪费内存]]

给一类东西加方法[css中的class]
普通方法
给一个对象加方法[css中的行间样式]
arr1.sum=function ()
Array.prototype.sum=function ()

加方法:几个人都买了华为手机 给手机买套 就相当于加方法

类[构造函数 那个老师个人认为 ]              模子    Array 不具备实际的功能只是用来构造对象
对象[实例]  蛋糕                                       arr     有实际的功能 arr.push()
var arr=new Array()
/* 在其他语言中 类确实和构造函数截然不同*/


混合法
用构造函数添加属性[没有new的工厂]
用原型方式 添加方法

面向过程的程序->面向对象的程序

原则
先写出普通的写法，然后改成面向对象写法

普通方法
前提:所有东西都在onload里面

改写普通方法:
函数不能有嵌套 可以有全局变量
[把onload中不是赋值的语句放到单独的函数中]

改成面向对象
onload	[初始化整个程序]	     构造函数[初始化一个对象]
全局变量	                          	属性
函数		                          	方法

改错:
this啥时候会问出问题?
1.定时器[所有被定时器调用的函数 this指向window]
2.事件
通过闭包传递this
再套一层  _this
传参
[改this指向问题，要尽量让面向对象中的this指向对象]

//this.aInput[i].onclick =this.tab; //this.tab 因为不仅仅是一个普通的函数 而是当前对象的方法
//tab这个函数嫁给了这个按钮
//这个式子 使this[在下面的tab方法中]属于按钮 而不再属于new出来的对象

解决办法:把一个匿名函数嫁给按钮
this.aInput[i].onclick =function(){
	_this.tab(this);   //这里的this 是指被点击的按钮
}

json:命名空间

宿主对象
宿主:生活的环境
js:浏览器提供的对象
DOM BOM
document
window

内置对象
Global[概念性的 只存在书上]
Math [不需要实例化 new 可以直接用]
Math.ceil();

本地对象
var arr=new Array();
arr.push();
Array [需要实例化 只能用new出来的实例]

----------------------------------------------------------------------------------------
正则表达式[字符串有没有一部分符合要求]
search:返回要查找的字符串第一次出现的位置，没有返回-1
substring 获取子字符串[不包含结束位置]
charAt 获取某个字符
split 分割字符串，获得数组

match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。
该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。

replace( , ) 替换


字符串:

var str = '妙味课堂-WWW.miaov.com';

str.charAt(1);      // '味'
str.charCodeAt(1);      // 21619
String.fromCharCode(22937, 21619);  // '妙味'

str.indexOf('m', 4);      // 9
str.lastIndexOf('o');     // 16

'1000' < '2'      // true
'1000' > 2      // true

str.substring(0, 4);      // '妙味课堂'
str.slice(-3);      // 'com'

str.toUpperCase();      // '妙味课堂-WWW.MIAOV.COM'
str.toLowerCase();      // '妙味课堂-www.miaov.com'

str.split('.', 2);      // [ '妙味课堂-WWW', 'miaov' ]

var arr = [ 'www', 'miaov', 'com' ];
arr.join('aaa');      // 'www.miaov.com'


RegExp:regular expression

简写:
var arr=new Array();  -> []
var fun=new Function(); -> function
var re=new RegExp('a', 'i')         //注意引号 即表达式要为字符串
var re=/a/i;

RegExp的方法:
 .test(); 返回true或false


 选项:
 全局匹配：g——global
 忽略大小写匹配:i-----ignore


 字符串与正则配合:
 search 返回出现的位置  str.search(/b/i);

 转义字符
  .  代表所有
 \d digital [0-9]                                \D       [^0-9]
 \w  world [0-9a-z_]                         \W      [^0-9a-z_]
 \s   space 空白字符    eg: 空格 制表符\t ..               \S

 字符类[]方括号
 1.或者
 2.范围[0-9] [a-z]
 3.除了..之外[^a]

量词
{n,m}
+  {1,}
*  {0,}   //不建议使用 会出现问题
?  {0,1}

行首 ^
行尾 $
单词边界 \b
---------------------------------------------------------------------------------------------------------
ajax:最好把监听放前面???

var xhr = new XMLHttpRequest();
最好把监听放前面???
xhr.onreadystatechange = function() {
	if (xhr.readyState == 4) {
		if ( xhr.status == 200 ) {
			alert( xhr.responseText );
		}
	}
}
xhr.open('get', '1.txt', true);
xhr.send();

127.0.0.1  localhost

ajax : Asynchronous JavaScript and XML 异步JavaScript和XML[用javascript异步形式去操作xml]
用javascript异步形式去操作xml

json:{"name":value,...}   //name 必须用双引号 [JSON.parse()]
//stringify : 可以把一个对象转成对应字符串
//parse : 可以把字符串转成对应对象

try {
	xhr = new XMLHttpRequest();
} catch (e) {          //e 为错误信息
	xhr = new ActiveXObject('Microsoft.XMLHTTP');
}
//ie6以下 ActiveXObject是有很多动能的插件  Microsoft.XMLHTTP要用的插件名字

表单：数据的提交
action : 数据提交的地址，默认是当前页面
method : 数据提交的方式，默认是get方式
	1.get
	把数据名称和数据值用=连接，如果有多个的话，那么他会把多个数据组合用&进行连接，然后把数据放到url?后面传到指定页面
	url长度限制的原因，我们不要通过get方式传递过多的数据
	2.post
	数据是通过请求头传递过去
	理论上无限制
enctype : 提交的数据格式，默认application/x-www-form-urlencoded
<form action="1.post.php" method="post">
<input type="text" name="username" />
<input type="text" name="age" />
<input type="submit" value="提交" />

get:从服务器获取数据
1.缓存[被缓存]  在url？后面连接一个随机数，时间戳
2.数据格式:编码encodeURI
3.数据放在open()里面作为参数传递
xhr.open('get','2.get.php?username='+encodeURI('刘伟')+'&age=30&' + new Date().getTime(),true);
xhr.send();

post:向服务器提交数据
1.post没有缓存问题 [提交的数据时不会被缓存的][缓存:无关ajax 和web机制有关系]
2.数据格式[申明发送的数据类型]:无需编码
3.数据放在send()里面作为参数传递
xhr.open('post','2.post.php',true);
xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded');
xhr.send('username=刘伟&age=30');

表单和ajax是两个类似的功能  而不是关联上下级一起完成一些事
表单:从前端向后端[服务器]提交数据
ajax:从后端获取数据 显示在前端

后端:
可以自己就储存数据
可以从form表单获取数据
可以通过open() send()中获取数据

接口:
localhost/miaov/2014-ajax/guestbook/index.php?&a=verifyUserName
localhost/miaov/2014-ajax/guestbook/index.php?m=index&a=verifyUserName&username=leo
-----------------------------------------------------------------------------------------------
JSONP : JSON with Padding
	1.script标签[script标签调用函数]
    2.用script标签加载资源是没有跨域问题的
1.提前定义好的一个全局函数(数据)
//必须要保证fn1 是全局函数 不然在这里执行不了 涉及作用域的问题
2.按需加载远程资源[DOM创建script标签]
	var oScript = document.createElement('script');
	oScript.src = '2.txt';
	document.body.appendChild(oScript);
'https://www.baidu.com/su?wd='+this.value+'&cb=maiov';//window.baidu.sug
window.baidu.sug({q:"g",p:false,s:["谷歌翻译","gps跟踪前女友","google翻译","github","gta5","google","git","工商银行","赶集网","高德地图"]});

data['opensearch:totalResults'].$t;
//['opensearch:totalResults'] 不能用.  因为opensearch:totalResults不符合变量命名规则
//['字符串的形式 不用管规则']

----------------------..操作 优缺点???????
html += '<dl><dt>'+ aEntry[i].title.$t +'</dt><dd><img src="'+ aEntry[i].link[2]['@href'] +'" /></dd></dl>';
oList.innerHTML = html;

DOM操作
var oScript = document.createElement('script');
oScript.src = 'http://api.douban.com/book/subjects?q='+oQ.value+'&alt=xd&callback=fn1';
document.body.appendChild(oScript);


http://api.douban.com/book/subjects?q=javascript&alt=xd&callback=fn1
